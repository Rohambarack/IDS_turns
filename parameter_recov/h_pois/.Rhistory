test_prior <- c(
prior(normal(10,5),class = "b"),
prior(beta(1,1),class = "b", dpar = "hu")
)
test_mod <- brm(
test_formula,
test_o,
family = hurdle_poisson(),
test_prior,
chains = 4,
cores = 4,
warmup = 2000,
iter = 4000
)
summary(test_mod)
test_formula <- bf(P_count ~0 + ID + offset(log(duration)),
hu ~ 0 + ID + offset(log(duration)),
family = hurdle_poisson() )
test_prior <- c(
prior(normal(10,5),class = "b"),
prior(beta(1,1),class = "b", dpar = "hu")
)
get_prior(data = test_o,formula = test_formula)
test_mod <- brm(
test_formula,
test_o,
family = hurdle_poisson(),
test_prior,
chains = 4,
cores = 4,
warmup = 2000,
iter = 4000
)
summary(test_mod)
n <- 400
test_o <- tibble(
ID = rep(c("A","B"), each = 2*n),
lambda = rep(c(5,10), each = 2*n),
duration= rep(200, 4*n),
mes_lambda = exp(log(lambda) + log(duration))
) %>%
rowwise() %>%
mutate(P_count = rpois(1,mes_lambda),
zero_help = rbinom(1,1,0.6)) %>%
ungroup() %>%
mutate(P_count = ifelse(zero_help == 0, 0 ,P_count))
test_formula <- bf(P_count ~0 + ID + offset(log(duration)),
hu ~ 0 + ID,
family = hurdle_poisson())
test_prior <- c(
prior(normal(10,5),class = "b"),
prior(beta(1,1),class = "b", dpar = "hu")
)
get_prior(data = test_o,formula = test_formula)
test_mod <- brm(
test_formula,
test_o,
family = hurdle_poisson(),
test_prior,
chains = 4,
cores = 4,
warmup = 2000,
iter = 4000
)
summary(test_mod)
n <- 100
test_o <- tibble(
ID = rep(c("A","B"), each = 2*n),
lambda = rep(c(5,10), each = 2*n),
duration= rep(200, 4*n),
mes_lambda = exp(log(lambda) + log(duration))
) %>%
rowwise() %>%
mutate(P_count = rpois(1,mes_lambda),
zero_help = rbinom(1,1,0.6)) %>%
ungroup() %>%
mutate(P_count = ifelse(zero_help == 0, 0 ,P_count))
test_formula <- bf(P_count ~0 + ID + offset(log(duration)),
hu ~ 0 + ID,
family = hurdle_poisson())
test_prior <- c(
prior(normal(10,5),class = "b"),
prior(beta(1,1),class = "b", dpar = "hu")
)
get_prior(data = test_o,formula = test_formula)
test_mod <- brm(
test_formula,
test_o,
family = hurdle_poisson(),
test_prior,
chains = 4,
cores = 4,
warmup = 2000,
iter = 4000
)
summary(test_mod)
test_mod <- brm(
test_formula,
test_o,
family = hurdle_poisson(),
sample_prior = "only",
test_prior,
chains = 4,
cores = 4,
warmup = 2000,
iter = 4000
)
pp_check(test_mod, ndraws = 100)
summary(test_mod)
test_o <- tibble(
ID = rep(c("A","B"), each = 2*n),
lambda = rep(c(5,10), each = 2*n),
duration= rep(200, 4*n),
mes_lambda = exp(log(lambda) + log(duration))
) %>%
rowwise() %>%
mutate(P_count = rpois(1,mes_lambda),
zero_help = rbinom(1,1,0.6)) %>%
ungroup() %>%
mutate(P_count = ifelse(zero_help == 0, 0 ,P_count))
test_formula <- bf(P_count ~0 + ID + offset(log(duration)),
hu ~ 0 + ID,
family = hurdle_poisson())
test_prior <- c(
prior(normal(10,5),class = "b"),
prior(beta(1,1),class = "b", dpar = "hu")
)
get_prior(data = test_o,formula = test_formula)
test_mod <- brm(
test_formula,
test_o,
family = hurdle_poisson(),
sample_prior = "only",
test_prior,
chains = 4,
cores = 4,
warmup = 4000,
iter = 8000
)
summary(test_mod)
log(5)
logit(5)
test_prior <- c(
prior(normal(10,5),class = "b"),
prior(normal(0,10),class = "b", dpar = "hu")
)
get_prior(data = test_o,formula = test_formula)
test_mod <- brm(
test_formula,
test_o,
family = hurdle_poisson(),
sample_prior = T,
test_prior,
chains = 4,
cores = 4,
warmup = 4000,
iter = 8000
)
summary(test_mod)
library(gtools)
logit(0.4)
inv.logit(-0.45)
inv.logit(-0.26)
logit(0)
logit(0.1)
logit(0.001)
logit(1)
logit(0.999)
inv.logit(15)
inv.logit(-15)
inv.logit(9)
inv.logit(-9)
test_formula <- bf(P_count ~0 + ID + offset(log(duration)),
hu ~ 0 + ID + offset(log(duration)),
family = hurdle_poisson())
test_prior <- c(
prior(normal(10,5),class = "b"),
prior(normal(0,3),class = "b", dpar = "hu")
)
get_prior(data = test_o,formula = test_formula)
test_mod <- brm(
test_formula,
test_o,
family = hurdle_poisson(),
sample_prior = T,
test_prior,
chains = 4,
cores = 4,
warmup = 4000,
iter = 8000
)
pp_check(test_mod, ndraws = 100)
summary(test_mod)
inv.logit(-5.73)
n <- 100
test_o <- tibble(
ID = rep(c("A","B"), each = 2*n),
lambda = rep(c(5,10), each = 2*n),
duration= rep(200, 4*n),
mes_lambda = exp(log(lambda) + log(duration))
) %>%
rowwise() %>%
mutate(P_count = rpois(1,mes_lambda),
zero_help = rbinom(1,1,0.6)) %>%
ungroup() %>%
mutate(P_count = ifelse(zero_help == 0, 0 ,P_count))
test_formula <- bf(P_count ~0 + ID + offset(log(duration)),
hu ~ 0 + ID,
family = hurdle_poisson())
test_prior <- c(
prior(normal(10,5),class = "b"),
prior(normal(0,3),class = "b", dpar = "hu")
)
get_prior(data = test_o,formula = test_formula)
test_mod <- brm(
test_formula,
test_o,
family = hurdle_poisson(),
sample_prior = T,
test_prior,
chains = 4,
cores = 4,
warmup = 4000,
iter = 8000
)
pp_check(test_mod, ndraws = 100)
summary(test_mod)
test_o <- tibble(
Participant = seq(1:2*n),
ID = rep(c("A","B"), each = 2*n),
lambda = rep(c(5,10), each = 2*n),
duration= rep(200, 4*n),
mes_lambda = exp(log(lambda) + log(duration))
)
test_o <- tibble(
Participant = seq(1:(2*n)),
ID = rep(c("A","B"), each = 2*n),
lambda = rep(c(5,10), each = 2*n),
duration= rep(200, 4*n),
mes_lambda = exp(log(lambda) + log(duration))
)
test_o <- tibble(
Participant = seq(1:(2*n)),
ID = rep(c("A","B"), each = n),
lambda = rep(c(5,10), each = n),
duration= rep(200, 2*n),
mes_lambda = exp(log(lambda) + log(duration))
)
View(test_o)
View(test_o)
test_o <- tibble(
Participant = seq(1:(2*n)),
ID = rep(c("A","B"), each = n),
pop_lambda = ifelse(ID == "A",
pop_lambda,
pop_lambda_B),
sd_lambda = ifelse(ID == "A",
sd_lambda,
sd_lambda_B),
duration= rep(200, 2*n)
)
pop_lambda <- 5
pop_lambda_B <- 10
sd_lambda <- 2
sd_lambda_B <- 3
test_o <- tibble(
Participant = seq(1:(2*n)),
ID = rep(c("A","B"), each = n),
pop_lambda = ifelse(ID == "A",
pop_lambda,
pop_lambda_B),
sd_lambda = ifelse(ID == "A",
sd_lambda,
sd_lambda_B),
duration= rep(200, 2*n)
)
library(brms)
library(tidyverse)
n <- 100
t_pop_lambda <- 5
t_pop_lambda_B <- 10
t_sd_lambda <- 2
t_sd_lambda_B <- 3
test_o <- tibble(
Participant = seq(1:(2*n)),
ID = rep(c("A","B"), each = n),
pop_lambda = ifelse(ID == "A",
t_pop_lambda,
t_pop_lambda_B),
sd_lambda = ifelse(ID == "A",
t_sd_lambda,
t_sd_lambda_B),
duration= rep(200, 2*n)
)
test_o <- test_o %>%
rowwise() %>%
mutate(
ind_lambda = rnorm(1,pop_lambda,sd_lambda)
)
View(test_o)
test_o <- test_o %>%
rowwise() %>%
mutate(
ind_lambda = rnorm(1,pop_lambda,sd_lambda),
measured_ind_lambda = exp(log(ind_lambda) + log(duration))
)
sd_round_zero <- function(x){
x_mod <- ifelse(x<0,0.00001,x)
return(x_mod)
}
test_o <- test_o %>%
rowwise() %>%
mutate(
ind_lambda = rnorm(1,pop_lambda,sd_lambda),
#let´s not get negative values in here
ind_lambda =  sd_round_zero(ind_lambda),
measured_ind_lambda = exp(log(ind_lambda) + log(duration))
)
k <- 50
#expand to k turns
test_o <- test_o %>% expand(nesting(
Participant,
ID,
duration,
measured_ind_lambda), turn = 1:s)
#expand to k turns
test_o <- test_o %>% expand(nesting(
Participant,
ID,
duration,
measured_ind_lambda), turn = 1:k)
test_o <- test_o %>%
rowwise() %>%
mutate(P_count = rpois(1,measured_ind_lambda))
test_formula <- bf(P_count ~0 + ID + offset(log(duration)) + (1 |gr(Participant, by=ID)),
family = poisson())
get_prior(data = test_o,formula = test_formula)
test_mod <- brm(
test_formula,
test_o,
family = poisson(),
test_prior,
chains = 4,
cores = 4,
warmup = 2000,
iter = 4000
)
test_prior <- c(
prior(normal(10,5),class = "b")
)
test_mod <- brm(
test_formula,
test_o,
family = poisson(),
test_prior,
chains = 4,
cores = 4,
warmup = 2000,
iter = 4000
)
get_prior(data = test_o,formula = test_formula)
test_prior <- c(
prior(normal(10,5),class = "b"),
prior(normal(0,3),class = "sd",group ="Participant")
)
test_mod <- brm(
test_formula,
test_o,
family = poisson(),
test_prior,
chains = 4,
cores = 4,
warmup = 2000,
iter = 4000
)
test_mod <- brm(
test_formula,
test_o,
family = poisson(),
test_prior,
chains = 4,
cores = 8,
warmup = 2000,
iter = 4000
)
summary(test_mod)
log(0.93)
exp(0.93)
exp(0.37)
n <- 60
k <- 200
t_pop_lambda <- 5
t_pop_lambda_B <- 10
t_sd_lambda <- 2
t_sd_lambda_B <- 3
test_o <- tibble(
Participant = seq(1:(2*n)),
ID = rep(c("A","B"), each = n),
pop_lambda = ifelse(ID == "A",
t_pop_lambda,
t_pop_lambda_B),
sd_lambda = ifelse(ID == "A",
t_sd_lambda,
t_sd_lambda_B),
duration= rep(200, 2*n)
)
test_o <- test_o %>%
rowwise() %>%
mutate(
ind_lambda = rnorm(1,pop_lambda,sd_lambda),
#let´s not get negative values in here
ind_lambda =  sd_round_zero(ind_lambda),
measured_ind_lambda = exp(log(ind_lambda) + log(duration))
)
#expand to k turns
test_o <- test_o %>% expand(nesting(
Participant,
ID,
duration,
measured_ind_lambda), turn = 1:k)
test_o <- test_o %>%
rowwise() %>%
mutate(P_count = rpois(1,measured_ind_lambda))
test_formula <- bf(P_count ~0 + ID + offset(log(duration)) + (1 |gr(Participant, by=ID)),
family = poisson())
test_prior <- c(
prior(normal(10,5),class = "b"),
prior(normal(0,3),class = "sd",group ="Participant")
)
get_prior(data = test_o,formula = test_formula)
log(10)
log(-3)
test_prior <- c(
prior(normal(0,3),class = "b"),
prior(normal(0,3),class = "sd",group ="Participant")
)
test_mod <- brm(
test_formula,
test_o,
family = poisson(),
test_prior,
chains = 4,
cores = 8,
warmup = 2000,
iter = 4000
)
summary(test_mod)
exp(1.62)
exp(2.2)
exp(0.52)
exp(0.36)
res <- as_draws_df(test_mod)
View(res)
pp_check(test_mod, ndraws = 100)
n <- 30
k <- 200
t_pop_lambda <- 5
t_pop_lambda_B <- 10
t_sd_lambda <- 2
t_sd_lambda_B <- 3
test_o <- tibble(
Participant = seq(1:(2*n)),
ID = rep(c("A","B"), each = n),
pop_lambda = ifelse(ID == "A",
t_pop_lambda,
t_pop_lambda_B),
sd_lambda = ifelse(ID == "A",
t_sd_lambda,
t_sd_lambda_B),
duration= rep(200, 2*n)
)
test_o <- test_o %>%
rowwise() %>%
mutate(
ind_lambda = rnorm(1,pop_lambda,sd_lambda),
#let´s not get negative values in here
ind_lambda =  sd_round_zero(ind_lambda),
measured_ind_lambda = exp(log(ind_lambda) + log(duration))
)
#expand to k turns
test_o <- test_o %>% expand(nesting(
Participant,
ID,
duration,
ind_lambda,
measured_ind_lambda), turn = 1:k)
test_o <- test_o %>%
rowwise() %>%
mutate(P_count = rpois(1,ind_lambda))
test_formula <- bf(P_count ~0 + ID + (1 |gr(Participant, by=ID)),
family = poisson())
test_prior <- c(
prior(normal(0,3),class = "b"),
prior(normal(0,3),class = "sd",group ="Participant")
)
get_prior(data = test_o,formula = test_formula)
test_mod <- brm(
test_formula,
test_o,
family = poisson(),
test_prior,
chains = 4,
cores = 8,
warmup = 2000,
iter = 4000
)
pp_check(test_mod, ndraws = 100)
summary(test_mod)
exp(0.5)
exp(0.24)
exp(1.6)
exp(2.23)
