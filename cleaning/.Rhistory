View(sim)
s_corr <- round(cov2cor(s_cov), 2)
View(s_cov)
View(s_corr)
class <- c("A","B","C","D","E")
mus <- c(4,2,7,5,9)
names <- list(class,class)
set.seed(123)
vals = round(runif(25,0,7),2)
s = matrix(vals,5,dimnames = names)
s[lower.tri(s)] = t(s)[lower.tri(s)]
diag(s) <- 0
sgdp <- .5
lscale <-1.5
vis <- tibble(x = seq(0,10,.1),
kij = d_brms_gp(D=x,sgdp = sgdp, lscale = lscale))
vis %>%
ggplot(aes(x=x,y = kij))+
geom_line()
s_cov <- apply(s,
1:2,
function(x) sgdp^2 * exp(- x^2 /(2*lscale^2)))
s_cov<-round(s_cov,2)
s_corr <- round(cov2cor(s_cov), 2)
View(s_cov)
df1 <- read_csv("./df1.csv")
setwd(".")
df1 <- read_csv("./df1.csv")
setwd(".")
df1 <- read_csv("./df1.csv")
df1 <- read_csv("C:/Users/balld/Desktop/spatial/df1.csv")
df1
View(df1)
pop <- read_csv("C:/Users/balld/Desktop/spatial/pop.csv")
View(pop)
pop <- read_csv("C:/Users/balld/Desktop/spatial/pop2.csv")
View(pop)
years <- 2008:2024
pop_heads <- rep(c("Q1","Q2","Q3","Q4"))
pop_heads <- rep(c("Q1","Q2","Q3","Q4"),length(years))
pop <- read_csv("C:/Users/balld/Desktop/spatial/pop.csv",header = FALSE)
pop <- read.csv("C:/Users/balld/Desktop/spatial/pop.csv")
View(pop)
pop <- read.csv("C:/Users/balld/Desktop/spatial/pop.csv",header = F)
View(pop)
pop <- pop %>%
select(!V1, !V2)
pop <- pop %>%
select(!V1)
length(colnames(pop))
#remove 2024
pop <- pop[,3:67]
View(pop)
pop_heads <- c("Municipality",rep(c("Q1","Q2","Q3","Q4"),length(years)))
years <- 2008:2023
pop_heads <- c("Municipality",rep(c("Q1","Q2","Q3","Q4"),length(years)))
colnames(pop) <- pop_heads
View(pop)
#remove non Q4
pop <- pop %>%
select(across(.cols, starts_with("Q4")))
#remove non Q4
pop <- pop %>%
dplyr::select(across(.cols, starts_with("Q4")))
#remove non Q4
pop <- pop %>%
dplyr::select(starts_with("Q4"))
years_str <- as.character(rep(years, each = 4))
paste(years_str,pop_heads[2:length(pop_heads)],sep ="")
pop <- read.csv("C:/Users/balld/Desktop/spatial/pop.csv",header = F)
#make appropriate column names
years <- 2008:2023
years_str <- as.character(rep(years, each = 4))
pop_heads <- c("Municipality",
rep(c("Q1","Q2","Q3","Q4"),length(years)))
full_colnames <- paste(years_str,pop_heads[2:length(pop_heads)],sep ="")
#remove excess
pop <- pop[,3:67]
colnames(pop) <- full_colnames
#remove non Q4
pop <- pop %>%
dplyr::select(starts_with("Q4"))
pop <- read.csv("C:/Users/balld/Desktop/spatial/pop.csv",header = F)
#make appropriate column names
years <- 2008:2023
years_str <- as.character(rep(years, each = 4))
pop_heads <- c("Municipality",
rep(c("Q1","Q2","Q3","Q4"),length(years)))
full_colnames <- paste(years_str,pop_heads[2:length(pop_heads)],sep ="")
#remove excess
pop <- pop[,3:67]
colnames(pop) <- full_colnames
View(pop)
pop <- read.csv("C:/Users/balld/Desktop/spatial/pop.csv",header = F)
#make appropriate column names
years <- 2008:2023
years_str <- as.character(rep(years, each = 4))
pop_heads <- rep(c("Q1","Q2","Q3","Q4"),length(years))
full_colnames <- c("Municipality",
paste(years_str,pop_heads[2:length(pop_heads)],sep =""))
#remove excess
pop <- pop[,3:67]
colnames(pop) <- full_colnames
View(pop)
paste(years_str,pop_heads[2:length(pop_heads)],sep =""))
paste(years_str,pop_heads[2:length(pop_heads)],sep ="")
paste(years_str,pop_heads,sep =""))
pop <- read.csv("C:/Users/balld/Desktop/spatial/pop.csv",header = F)
#make appropriate column names
years <- 2008:2023
years_str <- as.character(rep(years, each = 4))
pop_heads <- rep(c("Q1","Q2","Q3","Q4"),length(years))
full_colnames <- c("Municipality",
paste(years_str,pop_heads,sep =""))
#remove excess
pop <- pop[,3:67]
colnames(pop) <- full_colnames
View(pop)
#remove non Q4
pop <- pop %>%
dplyr::select(ends_with("Q4"))
pop <- read.csv("C:/Users/balld/Desktop/spatial/pop.csv",header = F)
#make appropriate column names
years <- 2008:2023
years_str <- as.character(rep(years, each = 4))
pop_heads <- rep(c("Q1","Q2","Q3","Q4"),length(years))
full_colnames <- c("Municipality",
paste(years_str,pop_heads,sep =""))
#remove excess
pop <- pop[,3:67]
colnames(pop) <- full_colnames
#remove non Q4
pop <- pop %>%
dplyr::select(Municiplaity,ends_with("Q4"))
#remove non Q4
pop <- pop %>%
dplyr::select(Municipality,ends_with("Q4"))
View(pop)
pop$Municipality
for (col in colnames(pop)){
Encoding(mydataframe[[pop]]) <- "UTF-8"}
for (col in colnames(pop)){
Encoding(pop[[col]]) <- "UTF-8"}
View(pop)
Encoding(pop$Municipality)
Encoding(pop$Municipality) <- "UTF-8"
View(pop)
Encoding(pop$Municipality)
Encoding(pop$Municipality) <- "UTF-8"
Encoding(pop$Municipality)
for (i in pop$Municipality){
Encoding(i) <- "UTF-8"
}
View(pop)
Encoding(pop$Municipality)
pop$Municipality
#Wrangle population by municipality
pop <- read.csv("C:/Users/balld/Desktop/spatial/pop.csv",header = F)
#make appropriate column names
years <- 2008:2023
years_str <- as.character(rep(years, each = 4))
pop_heads <- rep(c("Q1","Q2","Q3","Q4"),length(years))
full_colnames <- c("KOMMUNA",
paste(years_str,pop_heads,sep =""))
#remove excess
pop <- pop[,3:67]
colnames(pop) <- full_colnames
#remove non Q4
pop <- pop %>%
dplyr::select(Municipality,ends_with("Q4"))
#Wrangle population by municipality
pop <- read.csv("C:/Users/balld/Desktop/spatial/pop.csv",header = F)
#make appropriate column names
years <- 2008:2023
years_str <- as.character(rep(years, each = 4))
pop_heads <- rep(c("Q1","Q2","Q3","Q4"),length(years))
full_colnames <- c("KOMMUNA",
paste(years_str,pop_heads,sep =""))
#remove excess
pop <- pop[,3:67]
colnames(pop) <- full_colnames
#remove non Q4
pop <- pop %>%
dplyr::select(KOMMUNA,ends_with("Q4"))
View(pop)
pop$Municipality
pop$KOMMUNA
pop$KOMMUNA[3]
Encoding(pop$KOMMUNA[3])
Encoding(pop$KOMMUNA[3]) <- "Latin-1"
Encoding(pop$KOMMUNA[3])
Encoding(pop$KOMMUNA[3]) <- "latin1"
Encoding(pop$KOMMUNA[3])
pop$KOMMUNA[3]
#fix names
for (i in pop$KOMMUNA){
Encoding(i) <- "latin1"
}
View(pop)
print(i)
for (i in pop$KOMMUNA){
print(i)
}
#fix names
for (i in pop$KOMMUNA){
Encoding(i)
}
#fix names
for (i in pop$KOMMUNA){
Encoding(i) <- "latin1"
}
View(pop)
#fix names
for (i in 1:length(pop$KOMMUNA)){
Encoding(pop$KOMMUNA[i]) <- "latin1"
}
View(pop)
View(pop)
write.csv(pop,"C:/Users/balld/Desktop/spatial/pop_2.csv")
test <- read_csv("C:/Users/balld/Desktop/spatial/pop_2.csv")
View(test)
############################################################
test <- read.csv("C:/Users/balld/Desktop/spatial/df1.csv",header = F)
View(test)
############################################################
test <- read.csv("C:/Users/balld/Desktop/spatial/pop_proj_2028_2033.csv",header = F)
############################################################
test <- read.csv("C:/Users/balld/Desktop/spatial/poj_prop_2028_2033.csv",header = F)
############################################################
test <- read.csv("C:/Users/balld/Desktop/spatial/proj_prop_2028_2033.csv",header = F)
############################################################
test <- read.csv("C:/Users/balld/Desktop/spatial/proj_pop_2028_2033.csv",header = F)
View(test)
#drop columsn, rename columns, fix Kummuna
column_names <- c("KOMMUNA","2028","2033")
proj_pop <- proj_pop[2:length(colnames(proj_pop))]
proj_pop <- read.csv("C:/Users/balld/Desktop/spatial/proj_pop_2028_2033.csv",header = F)
#drop columsn, rename columns, fix Kummuna
column_names <- c("KOMMUNA","2028","2033")
proj_pop <- proj_pop[2:length(colnames(proj_pop))]
colnames(proj_pop) <- column_names
for (i in 1:length(proj_pop$KOMMUNA)){
Encoding(proj_pop$KOMMUNA[i]) <- "latin1"
}
View(proj_pop)
write.csv(pop,"C:/Users/balld/Desktop/spatial/proj_pop_clean.csv")
############################################################
#completed building
column_names <- c("KOMNUNA", 2006:2023)
test <- read.csv("C:/Users/balld/Desktop/spatial/build_comp_2006_2023.csv",header = F)
View(test)
build_2 <- read.csv("C:/Users/balld/Desktop/spatial/build_comp_2006_2023_2.csv",header = F)
build_1 <- read.csv("C:/Users/balld/Desktop/spatial/build_comp_2006_2023.csv",header = F)
build <- rbind(build_1,build_2)
############################################################
#completed building
column_names <- c("type","KOMNUNA", 2006:2023)
build <- build[2:length(colnames(build))]
View(build)
build_1 <- read.csv("C:/Users/balld/Desktop/spatial/build_comp_2006_2023.csv",header = F)
build_2 <- read.csv("C:/Users/balld/Desktop/spatial/build_comp_2006_2023_2.csv",header = F)
build <- rbind(build_1,build_2)
build <- build[3:length(colnames(build))]
colnames(build) <- column_names
for (i in 1:length(build$KOMMUNA)){
Encoding(build$KOMMUNA[i]) <- "latin1"
}
#completed building
column_names <- c("type","KOMMUNA", 2006:2023)
build_1 <- read.csv("C:/Users/balld/Desktop/spatial/build_comp_2006_2023.csv",header = F)
build_2 <- read.csv("C:/Users/balld/Desktop/spatial/build_comp_2006_2023_2.csv",header = F)
build <- rbind(build_1,build_2)
#drop columsn, rename columns, fix Kummuna
build <- build[3:length(colnames(build))]
colnames(build) <- column_names
for (i in 1:length(build$KOMMUNA)){
Encoding(build$KOMMUNA[i]) <- "latin1"
}
pivot_longer(build,cols = starts_with("2"),names_to = n_residence)
pivot_longer(build,cols = starts_with("2"),names_to = "n_residence")
pivot_wider(build, names_from =  = "type")
pivot_wider(build, names_from = "type")
pivot_wider(build, names_from = "type")
build %>%
pivot_longer(cols = starts_with("2"),names_to = "N_R")
build %>%
pivot_longer(cols = starts_with("2"),names_to = "N_R") %>%
pivot_wider(values_from = "type")
build %>%
pivot_longer(cols = starts_with("2"),names_to = "N_R") %>%
pivot_wider(values_from = "N_R", names_from = "type")
test <- build %>%
pivot_longer(cols = starts_with("2"),names_to = "N_R") %>%
pivot_wider(values_from = "N_R", names_from = "type")
View(test)
test <- build %>%
pivot_longer(cols = starts_with("2"),names_to = "N_R") %>%
pivot_wider(values_from = "N_R")
test <- build %>%
pivot_longer(cols = starts_with("2"),names_to = "N_R") %>%
pivot_wider(values_from = "type", names_from = "N_R")
test <- build %>%
pivot_longer(cols = starts_with("2"),names_to = "N_R")
test <- build %>%
pivot_longer(cols = starts_with("2"),names_to = "YEAR", values_to = "N_R")
test <- build %>%
pivot_longer(cols = starts_with("2"),names_to = "YEAR", values_to = "N_R") %>%
pivot_wider(values_from = "N_R", names_from = "type")
build <- build %>%
pivot_longer(cols = starts_with("2"),names_to = "YEAR", values_to = "N_R") %>%
pivot_wider(values_from = "N_R", names_from = "type")
colnames(build)[2:]colnames(build)
colnames(build)[2:length(colnames(build))]
colnames(build)[3:length(colnames(build))]
#sum up
test <- build %>%
mutate(SUM_R = sum(colnames(build)[3:length(colnames(build))]))
#sum up
types <- colnames(build)[3:length(colnames(build))]
rowSums(build,types)
rowSums(build,types,na.rm=T)
rowSums(build[,types])
build$SUM_R <- rowSums(build[,types])
View(build)
View(pop)
source("C:/Users/balld/Desktop/munka/IDS_articulation/IDS_turns/cleaning/Visualize_metadata.R", echo=TRUE)
setwd("C:/Users/balld/Desktop/munka/IDS_articulation/IDS_turns/cleaning")
source("C:/Users/balld/Desktop/munka/IDS_articulation/IDS_turns/cleaning/Visualize_metadata.R", echo=TRUE)
View(age)
View(age)
df_merged <- merge(cd,age, by = c("Participant","Visit"), all.x = T)
View(age)
age <- age %>%
select(Participant, Visit, Age2) %>%
na.omit(Age2)
View(age)
age <- read_csv("./raw_data/TurnTakingData_f0.csv")
age <- age %>%
select(Participant, Visit, Age2)
age <- age %>%
group_by(Visit, Participant) %>%
reframe( AGE = max(Age2))
View(age)
View(age)
unique(age$Participant)
names <- unique(age$Participant)
age %>%
filter(Participant == "CC")
View(age)
age$AGE
age$AGE[1]
length(age$AGE[1])
length(as.character(age$AGE[1]))
as.character(age$AGE[1])
len(as.character(age$AGE[1]))
age$AGE[1]
age$AGE[1] < 1000
age$AGE[6] < 1000
ages <- age$AGE
ages[6] < 1000
for (i in ages){
while (i < 1000) {
i = i*10
}
}
for (i in ages){
#leave Nas for now
if (is.na(i)){
i = i
}else{
#add zeros until it has 4 digits
while (i < 1000) {
i = i*10
}
}
}
for (i in ages){
#leave Nas for now
if (is.na(i)){
i = i
}else{
#add zeros until it has 4 digits
while (i < 1000) {
i = i*10
}
}
#make list
if(exists(new_ages)){
new_ages[[length(new_ages)+1]] = i
}else{
new_ages <- list(i)
}
}
exists(new_ages)
exists("new_ages")
#loop through ages
for (i in ages){
#leave Nas for now
if (is.na(i)){
i = i
}else{
#add zeros until it has 4 digits
while (i < 1000) {
i = i*10
}
}
#make list
if(exists("new_ages")){
new_ages[[length(new_ages)+1]] = i
}else{
new_ages <- list(i)
}
}
View(new_ages)
age$AGE_f <- new_ages
age$AGE_f <- as.number(new_ages)
age$AGE_f <- as.integer(new_ages)
View(age)
inspect <- age %>%
filter(is.na(AGE_f))
View(inspect)
na_names <- unique(inspect$Participant)
inspect <- age %>%
filter(Participant %in% na_names)
View(inspect)
age %>%
filter(Participant == na_names[1])
age %>%
filter(Participant == na_names[2])
age %>%
filter(Participant == na_names[3])
age %>%
filter(Participant == na_names[4])
age %>%
filter(Participant == na_names[5])
age %>%
filter(Participant == na_names[6])
age %>%
filter(Participant == na_names[7])
age %>%
filter(Participant == na_names[8])
age %>%
filter(Participant == na_names[9])
age %>%
filter(Participant == na_names[10])
is.na(age$AGE_f)
unique(is.na(age$AGE_f))
length(unique(is.na(age$AGE_f)))
unique(is.na(age$AGE_f))
unique(is.na(age$AGE_f)) == c("FAlSE, TRUE")
unique(is.na(age$AGE_f)) == c("FAlSE, TRUE")
unique(is.na(age$AGE_f)) == c("FALSE, TRUE")
unique(is.na(age$AGE_f)) %in% c("FALSE, TRUE")
unique(is.na(age$AGE_f)) %in% c("FALSE", "TRUE")
unique(is.na(age$AGE_f)) == c("FALSE", "TRUE")
unique(is.na(age$AGE_f)) == c("FALSE", "FALSE")
sorted(unique(is.na(age$AGE_f))) == c("FALSE", "FALSE")
sort(unique(is.na(age$AGE_f))) == c("FALSE", "FALSE")
sort(unique(is.na(age$AGE_f))) == c("FALSE", "TRUE")
all_equal(sort(unique(is.na(age$AGE_f))),c("FALSE", "TRUE"))
all.equal(sort(unique(is.na(age$AGE_f))),c("FALSE", "TRUE"))
sort(unique(is.na(age$AGE_f))) == c("FALSE", "TRUE")
all(is.na(age$AGE_f))
all(!is.na(age$AGE_f))
for (ID in names){
ID_df <- age %>%
filter(Participant == ID)
#No nas
if (all(!is.na(ID_df$Participant))) {
#only Nas
}else if (all(is.na(ID_df$Participant))) {
#partial missing values
}else{
}
for (ID in names){
ID_df <- age %>%
filter(Participant == ID)
#No nas
if (all(!is.na(ID_df$Participant))) {
#only Nas
}else if (all(is.na(ID_df$Participant))) {
#partial missing values
}else{
}
}
#look through each participant
for (ID in names){
ID_df <- age %>%
filter(Participant == ID)
#No nas
if (all(!is.na(ID_df$Participant))) {
#only Nas
}else if (all(is.na(ID_df$Participant))) {
#partial missing values
}else{
}
}
#look through each participant
for (ID in names){
ID_df <- age %>%
filter(Participant == ID)
#No nas
if (all(!is.na(ID_df$Participant))) {
print("fos")
#only Nas
}else if (all(is.na(ID_df$Participant))) {
#partial missing values
}else{
}
}
ID_df <- age %>%
filter(Participant == ID)
