prior(normal(0,.33),class = b, coef = "ASD1:CHI_MLU"),
prior(normal(0,.33),class = b, coef = "ASD1:MotorSkills"),
prior(normal(0,.33),class = b, coef = "ASD1:Socialization"),
##mean Visit
prior(normal(0,.33),class = b, coef = "ASD0:Visit"),
prior(normal(0,.33),class = b, coef = "ASD1:Visit"),
##### participant level
## mean
prior(normal(0,.33),class = sd, coef = "Intercept", group = Participant),
###mean Individual skills
prior(normal(0,.33),class = sd, coef = "CHI_MLU", group = Participant),
prior(normal(0,.33),class = sd, coef = "MotorSkills", group = Participant),
prior(normal(0,.33),class = sd, coef = "Socialization", group = Participant),
##mean Visit
prior(normal(0,.33),class = sd, coef = "Visit", group = Participant),
###### pop level sigma (logscale)
##mean ASD
prior(normal(-1,.33),class = b, coef = ASD0, dpar = "sigma"),
prior(normal(-1,.33),class = b, coef = ASD1, dpar = "sigma"),
###mean Individual skills
prior(normal(0,.33),class = b, coef = "ASD0:CHI_MLU", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD0:MotorSkills", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD0:Socialization", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD1:CHI_MLU", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD1:MotorSkills", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD1:Socialization", dpar = "sigma"),
##mean Visit ( end of log scale)
prior(normal(0,.33),class = b, coef = "ASD0:Visit", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD1:Visit", dpar = "sigma"),
### participant level
## mean
prior(normal(0,.33),class = sd, coef = "Intercept", group = Participant, dpar = "sigma")
)
return(log_priors)
}
ar_priors <- log_prior_function()
ar_priors
ar_model <- brm(
data = norm.trainData,
formula = y_ar,
prior = ar_priors,
family = lognormal(),
sample_prior = T,
warmup = 500,
iter = 1500,
cores = 8,
chains = 4,
init = 0,
)
pp_check(ar_model,ndraws=100)
summary(ar_model)
saveRDS(ar_model,"step_2_ar_2.rds")
ar_priors
get_prior(y_ar, norm.trainData)
vis <- as_draws_df(ar_model)
vis %>% ggplot() +
geom_density(aes( x = `prior_sigma_ASD:MotorSkills`), fill = "red", alpha = .3) +
geom_density(aes( x = `b_sigma_ASD:MotorSkills`), fill = "green", alpha = .3)
vis %>% ggplot() +
geom_density(aes( x = `prior_ASD:MotorSkills_sigma`), fill = "red", alpha = .3) +
geom_density(aes( x = `b_sigma_ASD:MotorSkills`), fill = "green", alpha = .3)
vis %>% ggplot() +
geom_density(aes( x = `r_ASD:MotorSkills_sigma`), fill = "red", alpha = .3) +
geom_density(aes( x = `b_sigma_ASD:MotorSkills`), fill = "green", alpha = .3)
log_prior_function <- function(){
log_priors <- c(
### population level
##mean ASD
prior(normal(6,1),class = b, coef = ASD0),
prior(normal(6,1),class = b, coef = ASD1),
###mean Individual skills
prior(normal(0,.33),class = b, coef = "ASD0:CHI_MLU"),
prior(normal(0,.33),class = b, coef = "ASD0:MotorSkills"),
prior(normal(0,.33),class = b, coef = "ASD0:Socialization"),
prior(normal(0,.33),class = b, coef = "ASD1:CHI_MLU"),
prior(normal(0,.33),class = b, coef = "ASD1:MotorSkills"),
prior(normal(0,.33),class = b, coef = "ASD1:Socialization"),
##mean Visit
prior(normal(0,.33),class = b, coef = "ASD0:Visit"),
prior(normal(0,.33),class = b, coef = "ASD1:Visit"),
##### participant level
## mean
prior(normal(0,.33),class = sd, coef = "Intercept", group = Participant),
###mean Individual skills
prior(normal(0,.33),class = sd, coef = "CHI_MLU", group = Participant),
prior(normal(0,.33),class = sd, coef = "MotorSkills", group = Participant),
prior(normal(0,.33),class = sd, coef = "Socialization", group = Participant),
##mean Visit
prior(normal(0,.33),class = sd, coef = "Visit", group = Participant),
###### pop level sigma (logscale)
##mean ASD
prior(normal(0,1),class = b, coef = ASD0, dpar = "sigma"),
prior(normal(0,1),class = b, coef = ASD1, dpar = "sigma"),
###mean Individual skills
prior(normal(0,.33),class = b, coef = "ASD0:CHI_MLU", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD0:MotorSkills", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD0:Socialization", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD1:CHI_MLU", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD1:MotorSkills", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD1:Socialization", dpar = "sigma"),
##mean Visit ( end of log scale)
prior(normal(0,.33),class = b, coef = "ASD0:Visit", dpar = "sigma"),
prior(normal(0,.33),class = b, coef = "ASD1:Visit", dpar = "sigma"),
### participant level
## mean
prior(normal(0,.33),class = sd, coef = "Intercept", group = Participant, dpar = "sigma")
)
return(log_priors)
}
median_priors_again <- log_prior_function()
median_priors_again
get_prior(median_priors_again,y_median_f0)
get_prior(y_median_f0, norm.trainData)
median_model_again <- brm(
data = norm.trainData,
formula = y_median_f0,
prior = y_median_priors_again,
family = lognormal(),
sample_prior = T,
warmup = 500,
iter = 1500,
cores = 8,
chains = 4,
init = 0,
)
median_model_again <- brm(
data = norm.trainData,
formula = y_median_f0,
prior = median_priors_again,
family = lognormal(),
sample_prior = T,
warmup = 500,
iter = 1500,
cores = 8,
chains = 4,
init = 0,
)
####################################################################################
library(brms)
library(tidyverse)
d <- read_csv("../data/clean_data_mlu_correct.csv")
d <- read_csv("./data/clean_data_mlu_correct.csv")
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = ArticulationRate))+
geom_density()
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()
curve(dlnorm(x,meanlog = 4, sdlog = 1), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4, sdlog = 2), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4, sdlog = .5), from =-1, to = 600)
curve(dlnorm(x,meanlog = 6, sdlog = 1), from =-1, to = 600)
curve(dlnorm(x,meanlog = 5, sdlog = 1), from =-1, to = 600)
curve(dlnorm(x,meanlog = 5.2, sdlog = 1), from =-1, to = 600)
m <- readRDS("step_2_iqr_f0_2.rds")
summary(m)
exp(06)
exp(0.6)
exp(0.13)
curve(dlnorm(x,meanlog = 3.9, sdlog = 1.8), from =-1, to = 600)
curve(dlnorm(x,meanlog = 3.9, sdlog = 1.3), from =-1, to = 600)
curve(dlnorm(x,meanlog = 3.9, sdlog = 2), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4, sdlog = 1), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4, sdlog = 1.4), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4, sdlog = 0.5), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4.4, sdlog = 1), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4.5, sdlog = 1), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4.5, sdlog = 1.3), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.3), from =-1, to = 600)
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()
)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.3), from =-1, to = 600)
curve(dgamma(x,shape = 3,rate =3))
curve(dgamma(x,shape = 2,rate =3),from = -1, to = 200)
curve(dgamma(x,shape = 2,rate =7),from = -1, to = 200)
curve(dgamma(x,shape = 7,rate =7),from = -1, to = 200)
curve(dgamma(x,shape = 100,rate =7),from = -1, to = 200)
curve(dgamma(x,shape = 1,rate =7),from = -1, to = 200)
curve(dgamma(x,shape = 3,rate =70),from = -1, to = 200)
curve(dgamma(x,shape = 3,rate =100),from = -1, to = 200)
curve(dgamma(x,shape = 3,rate =.1),from = -1, to = 200)
curve(dgamma(x,shape = 3,rate =.01),from = -1, to = 200)
curve(dgamma(x,shape = 3,rate =.05),from = -1, to = 200)
curve(dgamma(x,shape = 2,rate =.05),from = -1, to = 200)
curve(dgamma(x,shape = 2,rate =.1),from = -1, to = 200)
curve(dgamma(x,shape =.1,rate =.1),from = -1, to = 200)
curve(dgamma(x,shape =4,rate =.1),from = -1, to = 200)
curve(dgamma(x,shape =1,rate =.1),from = -1, to = 200)
curve(dgamma(x,shape =1.5,rate =.1),from = -1, to = 200)
curve(dgamma(x,shape =2,rate =.1),from = -1, to = 200)
curve(dgamma(x,shape =2,rate =.1),from = -1, to = 50)
curve(dgamma(x,shape =1,rate =.1),from = -1, to = 50)
curve(dgamma(x,shape =1,rate =0),from = -1, to = 50)
curve(dgamma(x,shape =1,rate =0.001),from = -1, to = 50)
curve(dgamma(x,shape =1,rate =0.001),from = -1, to = 600)
curve(dgamma(x,shape =1,rate =0.01),from = -1, to = 600)
curve(dgamma(x,shape =2,rate =0.01),from = -1, to = 600)
curve(dgamma(x,shape =1.2,rate =0.01),from = -1, to = 600)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.3), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.3), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.3), from =-1, to = 600)
curve(dgamma(x,shape =1.2,rate =0.01),from = -1, to = 600, col= "red", add = T)
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.3), from =-1, to = 600)
curve(dgamma(x,shape =1.2,rate =0.01),from = -1, to = 600, col= "red", add = T)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.2), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.8), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.5), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.5), from =-1, to = 600)
curve(dgamma(x,shape =1.2,rate =0.01),from = -1, to = 600, col= "red", add = T)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.5), from =-1, to = 600)
curve(dgamma(x,shape =1.2,rate =0.05),from = -1, to = 600, col= "red", add = T)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.5), from =-1, to = 600)
curve(dgamma(x,shape =1.2,rate =0.03),from = -1, to = 600, col= "red", add = T)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.5), from =-1, to = 600)
curve(dgamma(x,shape =1.2,rate =0.02),from = -1, to = 600, col= "red", add = T)
curve(dlnorm(x,meanlog = 4.7, sdlog = 2), from =-1, to = 600)
curve(dlnorm(x,meanlog = 4.7, sdlog = 2), from =-1, to = 600)
curve(dgamma(x,shape =1.2,rate =0.02),from = -1, to = 600, col= "red", add = T)
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.8), from =-1, to = 600)
curve(dgamma(x,shape =1.2,rate =0.02),from = -1, to = 600, col= "red", add = T)
vis_help <- tibble(d = rgamma(1000,shape = 1.2,rate = 0.02))
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()+
geom_density(aes(x =vis_help$d), color = "red")
vis_help <- tibble(d = rgamma(79045,shape = 1.2,rate = 0.02))
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()+
geom_density(aes(x =vis_help$d), color = "red")
vis_help <- tibble(g = rgamma(79045,shape = 1.2,rate = 0.02),
l = rlnorm(79045, meanlog = 4.7, sdlog = 1.8))
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()+
geom_density(aes(x =vis_help$g), color = "red") +
geom_density(aes(x =vis_help$l), color = "green") +
curve(dlnorm(x,meanlog = 4.7, sdlog = 1.8), from =-1, to = 600)
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()+
geom_density(aes(x =vis_help$g), color = "red") +
geom_density(aes(x =vis_help$l), color = "green")
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()+
geom_density(aes(x =vis_help$g), color = "red") +
geom_density(aes(x =vis_help$l), color = "green")
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()+
geom_density(aes(x =vis_help$g), color = "red")
vis_help <- tibble(g = rgamma(79045,shape = 1.2,rate = 0.025),
vis_help <- tibble(g = rgamma(79045,shape = 1.2,rate = 0.025),
l = rlnorm(79045, meanlog = 4.7, sdlog = 1.8))
d %>%
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()+
geom_density(aes(x =vis_help$g), color = "red")
vis_help <- tibble(g = rgamma(79045,shape = 1.2,rate = 0.016),
l = rlnorm(79045, meanlog = 4.7, sdlog = 1.8))
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()+
geom_density(aes(x =vis_help$g), color = "red")
vis_help <- tibble(g = rgamma(79045,shape = 1.2,rate = 0.018),
l = rlnorm(79045, meanlog = 4.7, sdlog = 1.8))
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()+
geom_density(aes(x =vis_help$g), color = "red")
vis_help <- tibble(g = rgamma(79045,shape = 1.2,rate = 0.017),
l = rlnorm(79045, meanlog = 4.7, sdlog = 1.8))
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()+
geom_density(aes(x =vis_help$g), color = "red")
log(0.017)
log(0.02)
############################
pp_check(m,ndraws = 100)
d %>%
filter(Interlocutor == "Parent") %>%
ggplot(aes(x = iqr_f0))+
geom_density()+
geom_density(aes(x =vis_help$g), color = "red")
#libraries:
library(tidyverse)
df_art <- read_csv("TurnTakingData_articulation.csv")
df_art <- read_csv("C:/Users/balld/Desktop/munka/TurnTakingData_articulation.csv")
df_f0 <- read_csv("C:/Users/balld/Desktop/munka/TurnTakingData_f0.csv")
##### clean data ##############################
### Check the two dataframes
all.equal(df_art[,1:56],df_f0[,1:56])
df_57 <- df_art[,57:60]
df_full <- cbind(df_f0,df_57)
df_full$Duration
max(df_full$Duration)
min(df_full$Duration)
df_full %>%
ggplot(aes(x = Duration)) +
geom_density()
df_full %>%
ggplot(aes(x = DurationSec)) +
geom_density()
dur <- df_full$Duration
dur <- na.omit(dur)
max(dur)
View(df_f0)
View(df_full)
7 /1000
##### needed columns
df_c_1 <- df_full %>%
select(Participant,
Visit,
ASD,
Interlocutor,
median_f0,
iqr_f0,
ArticulationRate,
PauseCount,
PauseDuration,
DurationSec,
Socialization,
MotorSkills )
mlu <- read_delim(delim = ";","C:/Users/balld/Desktop/munka/MLUv2.csv")
View(mlu)
#participant : regex to extract everything before first dot
#V extract everything between the two dots
#replace non digits with nothing
mlu_c_1 <- mlu %>%
mutate( Participant = str_extract(mlu$`File-name`, "^[^.]*+(?=\\.)"),
V =  str_extract(mlu$`File-name`,"(?<=\\.).*?(?=\\.)"),
Visit = as.integer(gsub("\\D","",V)))
View(mlu_c_1)
mlu_c_2 <- mlu_c_1 %>%
rename(CHI_MLU=`CHI-MLU`) %>%
select(Participant, Visit, CHI_MLU)
View(mlu_c_2)
View(df_c_1)
#MLU and rest of the data mismatch
#interlocutor nas, also  happen with durint visits.... can't  simply remove all
n1 <- sort(unique(df_c_1$Participant))
n2 <- sort(unique(mlu_c_2$Participant))
all.equal(n1,n2)
#find participants from the data, which have no MLU
#most are NA filled and will be removed, except JG2
na_list <- df_c_1 %>%
filter(!Participant %in% n2) %>%
select(Participant) %>%
unique()
View(na_list)
na_list <- na_list[c(1:5,7:length(na_list$Participant)),]
df_c_2 <- df_c_1 %>%
filter(!Participant %in% na_list)
count_turns <- function(df,id,vis){
df_fin <- df %>%
filter(Participant == id,
Visit == vis)
#count rows (turns) if visit is not missing
if (length(df_fin[,1])>1){
df_fin$Turn <- seq(1:length(df_fin$Participant))
} else if (length(df_fin[,1])==1){
#if visit is notes as 1 line of NAs
df_fin$Turn <- NA
} else {
#if visit is completely missing from df
df_fin <- tibble( Participant = id,
Visit = vis,
Turn = NA)
}
return(df_fin)
}
#add turn numbering
for (participant in unique(df_c_2$Participant)){
for (visit in unique(df_c_2$Visit)){
if (participant == unique(df_c_2$Participant)[1] &
visit ==  unique(df_c_2$Visit)[1]){
#separate by id and visit
df_fin <- count_turns(df_c_2,participant,visit)
} else {
#separate by id and visit
df_temp <- count_turns(df_c_2,participant,visit)
df_fin<- plyr::rbind.fill(df_fin,df_temp)
}
}
}
#remove missing visits
df_c_3 <- df_fin %>%
filter(!is.na(Turn))
View(df_c_3)
################
# note original order before mergint ot keep turns
df_c_4 <- df_c_3 %>%
mutate(ord = as.integer(rownames(.)))
View(df_c_4)
df_mlu_merged <- merge(df_c_4,mlu_c_2, by = c("Participant","Visit"), all.x = T)
View(df_mlu_merged)
#reorder by original turns
df_mlu_merged <- df_mlu_merged[order(df_mlu_merged$ord), ]
View(df_mlu_merged)
#save
write_csv(df_mlu_merged,"clean_data_mlu_correct_adj_dur.csv")
data <- read_csv("../../data/clean_data_mlu_correct_adj_dur.csv")
setwd("C:/Users/balld/Desktop/munka/IDS_articulation/IDS_turns/step_0_NO_IND_DIFF/scripts")
data <- read_csv("../../data/clean_data_mlu_correct_adj_dur.csv")
##### remove children, its only IDS
data <- data %>%
filter(Interlocutor == "Parent")
### NA 0s from iqr
## NA 0s from articulation rate
data <- data %>%
mutate( iqr_f0 = ifelse(iqr_f0 == 0 | ArticulationRate == 0,
NA,iqr_f0),
median_f0 = ifelse(iqr_f0 == 0 | ArticulationRate == 0,
NA,median_f0),
ArticulationRate= ifelse(iqr_f0 == 0 | ArticulationRate == 0,
NA,ArticulationRate),
PauseCount = ifelse(iqr_f0 == 0 | ArticulationRate == 0,
NA,PauseCount),
PauseDuration = ifelse(iqr_f0 == 0 | ArticulationRate == 0,
NA,PauseDuration)
)
#### asd to factor
data <- data %>%
mutate(ASD = as.factor(ASD))
asd_set <- unique((data %>%filter(ASD == 1))$Participant)
#asd_test <- sample(asd_set, 8)
asd_test <- c("Annie","AS2","JG2","CD2","Eduardo","Charles","Johan","Luis")
non_asd_set <-unique((data %>%filter(ASD == 0))$Participant)
#non_asd_test <- sample(non_asd_set, 6)
non_asd_test <-  c("VC","JG","BC","SB","MM","AZ")
training_set <- data %>%
filter(! Participant %in% asd_test) %>%
filter(! Participant %in% non_asd_test)
test_set <- data %>%
filter(Participant %in% asd_test | Participant %in% non_asd_test)
##########################################################
h_pois_prior_function <- function(){
h_pois_priors <- c(
### population level
##mean ASD
prior(normal(0,1),class = b, coef = ASD0),
prior(normal(0,1),class = b, coef = ASD1),
##mean Visit
prior(normal(0,.33),class = b, coef = "ASD0:Visit"),
prior(normal(0,.33),class = b, coef = "ASD1:Visit"),
##### participant level
## mean
prior(normal(0,.33),class = sd, coef = "Intercept", group = Participant),
##mean Visit
prior(normal(0,.33),class = sd, coef = "Visit", group = Participant),
###### pop level hu
##mean ASD
prior(uniform(0,1),class = b, coef = ASD0, dpar = "hu"),
prior(uniform(0,1),class = b, coef = ASD1, dpar = "hu"),
##mean Visit ( end of log scale)
prior(normal(0,.33),class = b, coef = "ASD0:Visit", dpar = "hu"),
prior(normal(0,.33),class = b, coef = "ASD1:Visit", dpar = "hu"),
### participant level
## mean
prior(normal(0,.33),class = sd, coef = "Intercept", group = Participant, dpar = "hu"),
##mean Visit
prior(normal(0,.33),class = sd, coef = "Visit", group = Participant,dpar = "hu")
)
return(h_pois_priors)
}
##############################################################
y_pausecount<- bf(PauseCount ~ 0 + ASD + ASD:Visit + offset(log(DurationSec)) + (1 + Visit |gr(Participant, by=ASD)),
hu ~ 0 + ASD + ASD:Visit + ( 1 + Visit |gr(Participant, by=ASD)),
family = hurdle_poisson())
######### modelling IDS
library(tidyverse)
library(brms)
##############################################################
y_pausecount<- bf(PauseCount ~ 0 + ASD + ASD:Visit + offset(log(DurationSec)) + (1 + Visit |gr(Participant, by=ASD)),
hu ~ 0 + ASD + ASD:Visit + ( 1 + Visit |gr(Participant, by=ASD)),
family = hurdle_poisson())
y_p_count_priors <- h_pois_prior_function()
pause_count_model_test <- brm(
data = training_set,
formula = y_pausecount,
prior = y_p_count_priors,
family = hurdle_poisson(),
sample_prior = T,
warmup = 500,
iter = 2500,
cores = 8,
chains = 4,
init = 0,
)
